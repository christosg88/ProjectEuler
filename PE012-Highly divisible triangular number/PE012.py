# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
# 1: 1
# 3: 1,3
# 6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?

from math import floor
def sieve(limit):
    sievebound = (limit-1)/2
    crosslimit = (int(floor(limit**0.5))-1)/2
    sieve = [False for x in xrange(0, sievebound+1)]
    for i in xrange(1,crosslimit+1):
        if not sieve[i]:
            for j in xrange(2*i*(i+1),sievebound+1,(2*i)+1):
                sieve[j] = True
    final = [2]
    for i in xrange(1,sievebound+1):
        if not sieve[i]:
            final.append(2*i+1)
    return final

def isPrime(number):
    if number == 1:
        return False
    elif number < 4:
        return True
    elif number % 2 == 0:
        return False
    elif number < 9:
        return True
    elif number % 3 == 0:
        return False
    else:
        r = floor(number**0.5)
        f = 5
        while f <= r:
            if number % f == 0:
                return False
            elif number % (f+2) == 0:
                return False
            else:
                f += 6
        return True

primes = sieve(65500)

sum = 1
counter = 1

while True:
    counter += 1
    sum += counter

    r = 0 # the number of distinct prime factors
    prime_factors = [] # a list with all prime factors of sum

    for prime in primes:
        if sum % prime == 0:
            prime_factors.append(prime)
            r += 1
        if prime > sum**0.5:
            break

    if isPrime(sum):
        continue
    
    sigma = 1
    for prime in prime_factors:
        power = 1
        while sum % (prime**power) == 0:
            power += 1

        sigma *= (power)    
    if sigma > 500:
        break
print sum
# 76576500